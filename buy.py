from fastapi import APIRouter, HTTPException
from datetime import datetime
from typing import Dict, List
from pydantic import BaseModel
from Database.connection import mydb  # Assuming you have a database connection module

router = APIRouter()


class FrontendOrder(BaseModel):
    customer_id: int
    total_amount: float
    order_details: int
    
def customer_exists(customer_id: int) -> bool:
    mycursor = mydb.cursor()
    sql = "SELECT COUNT(*) FROM customer WHERE cust_id = %s"
    mycursor.execute(sql, (customer_id,))
    result = mycursor.fetchone()
    mycursor.close()
    return result[0] > 0

@router.post("/placeorder")
async def insert_order(frontend_order: FrontendOrder):
    try:
        if not customer_exists(frontend_order.customer_id):
            return {"status_code":404, "detail":"Customer not found"}
        
        current_date_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        mycursor = mydb.cursor()
        
        order_details = f"Customer has ordered total {frontend_order.order_details} items."
        # Prepare data for SQL query
        order_data = (
            frontend_order.customer_id,
            current_date_time,
            frontend_order.total_amount,
            order_details
        )
        
        # Execute SQL query
        sql = "INSERT INTO orders (customer_id, order_date, total_amount, order_details) VALUES (%s, %s, %s, %s)"
        mycursor.execute(sql, order_data)
        mydb.commit()
        
        # Fetch the order ID generated by the database
        order_id = mycursor.lastrowid
        
        mycursor.close()
        return {"message": "Order inserted successfully", "order_id": order_id}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


